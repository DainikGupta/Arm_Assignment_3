;THIS PROGRAM IMPLEMENTS NEURAL NETWORK.
;IT MAKES USE OF SIGMOID FUNCTION.

	AREA    exponent,CODE,READONLY
        EXPORT __main
		IMPORT	printMsg
        ENTRY
__main    FUNCTION
			MOV R6, #4				;REGISTER THAT STORES WHAT LOGIC IS TO BE IMPLEMENTED
			B NN


CALC_SIG	VMOV.F32 S2, #1		;STORING FACTORIAL VALUE
			VMOV.F32 S5, #1		;STORING EACH TERM
			VMOV.F32 S6, #1		;STORING THE SUM
			MOV R1, #30			;NUMBER OF TERMS IN SERIES TO BE CALCULATED(n)
			MOV R10, #0
		

;THIS LOOP IS USED TO GENERATE DIFFERENT TERMS IN THE EXPONENTIAL SERIES.
LOOP1	BL POWER			;TO GENERATE DIFFERENT POWERS OF X.
		ADD R10, R10, #1	;INCREMENTING FOR LOOP
		MOV R3, R10			;LET R3 IS STORING n'
		VMOV.F32 S2, #1		;INITIALING THE FACTORIAL REGISTER
		CMP R10, R1			;COMPARISON FOR THE NO. OF TERMS(n'<n).
		BLT FACT			;BRANCHING TO FACT
		B SIGMOID


;THIS FUNCTION IS TO CALCULATE THE FACTORIAL OF A NUMBER.
;THE NUMBER WHOSE FACTORIAL IS TO BE CALCULATED WILL BE STORED IN R3.
;THE FACTORIAL VALUE WILL BE STORED IN S2.
FACT 	VMOV S3, R3			;MOVING THE VALUE OF R3 TO FPREGISTER S3.
		VCVT.F32.U32 S3, S3	;CONVERTING THE FLOATING POINT VALUE TO INTEGER.
		VMUL.F32 S2, S2, S3	;CALCULATING FACTORIAL BY MULTIPLYING S3.
		SUB R3, R3, #1		;DECREMENTING n'
		CMP R3, #1			;S7 IS USED TO STORE VALUE OF 1
		BGT FACT
		BLE SUM


;THIS FUNCTION CALCULATES THE SUM OF THE SERIES.
SUM		VDIV.F32 S7, S5, S2	;THIS CALCULATES EACH TERM BY DIVING THE POWER OF X BY FACTORIAL VALUE.
		VADD.F32 S6, S6, S7	;THE NEW TERM IS ADDED TO SUM.
		B LOOP1


;THIS IS USED TO CALCULATE DIFFERENT POWERS OF X
POWER	VMUL.F32 S5, S5, S0	;INCREASING POWER EACH TIME.
		BLX LR
	
;THIS LOOP CALCULATES THE SIGMOID.
SIGMOID		VMOV.F32 S8, #1
			VADD.F32 S9, S8, S6
			VDIV.F32 S8, S8, S9
			VMOV.F32 R0, S8
			BL printMsg
			B STOP

;THIS FUNCTION DETERMINES WHAT LOGIC IS TO BE IMPLEMENTED
NN		CMP R6, #0
		BEQ LOGIC_AND
		CMP R6, #1
		BEQ LOGIC_OR
		CMP R6, #2
		BEQ LOGIC_NOT
		CMP R6, #3
		BEQ LOGIC_NAND
		CMP R6, #4
		BEQ LOGIC_NOR
		CMP R6, #5
		BEQ LOGIC_XOR
		CMP R6, #6
		BEQ LOGIC_XNOR
		BL DATASET
		BL COMPUTE

;LOGIC GATES INITIALIZATION WITH DIFFERENT WEIGHTS
LOGIC_AND	VLDR.F32 S1, =-0.1			;S1=W1
			VLDR.F32 S2, =0.2			;S2=W2
			VLDR.F32 S3, =0.2			;S3=W3
			VLDR.F32 S4, =-0.2			;S4=BIAS
			B DATASET

LOGIC_OR	VLDR.F32 S1, =-0.1
			VLDR.F32 S2, =0.7
			VLDR.F32 S3, =0.7
			VLDR.F32 S4, =-0.1
			B DATASET
			
LOGIC_NOT	VLDR.F32 S1, =0.5
			VLDR.F32 S2, =-0.7
			VLDR.F32 S3, =0
			VLDR.F32 S4, =0.1
			B DATASET
			
LOGIC_NAND	VLDR.F32 S1, =0.6
			VLDR.F32 S2, =-0.8
			VLDR.F32 S3, =-0.8
			VLDR.F32 S4, =0.3
			B DATASET
			
LOGIC_NOR	VLDR.F32 S1, =0.5
			VLDR.F32 S2, =-0.7
			VLDR.F32 S3, =-0.7
			VLDR.F32 S4, =0.1
			B DATASET
			
LOGIC_XOR	VLDR.F32 S1, =-5
			VLDR.F32 S2, =20
			VLDR.F32 S3, =10
			VLDR.F32 S4, =1
			B DATASET
			
LOGIC_XNOR	VLDR.F32 S1, =-5
			VLDR.F32 S2, =20
			VLDR.F32 S3, =10
			VLDR.F32 S4, =1
			B DATASET

;THIS PROVIDES THE DATASET FOR THE LOGIC GATE
DATASET		VLDR.F32 S5, =1			;D1
			VLDR.F32 S6, =0			;D2
			VLDR.F32 S7, =0			;D3
			B COMPUTE

;THIS CALCULATES THE VALUE OF AND TRANSFER THIS VALUE TO EXPONETIAL FUNCTION.
COMPUTE		VLDR.F32 S8, =0
			VMUL.F32 S1, S1, S5		
			VMUL.F32 S2, S2, S6
			VMUL.F32 S3, S3, S7
			VADD.F32 S8, S1, S2
			VADD.F32 S8, S8, S3
			VADD.F32 S8, S8, S4		;BIAS IS ADDED
			VMOV.F32 S0, S8			;VALUE OF X IS STORED IN S0
			VNEG.F32 S0, S0			;S0 IS NEGATED TO OBTAIN (-X)
			B CALC_SIG


STOP    B STOP
        ENDFUNC
        END
